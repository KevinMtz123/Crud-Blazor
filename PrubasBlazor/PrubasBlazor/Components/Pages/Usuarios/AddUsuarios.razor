@page "/Usuarios/addUsuario"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using PrubasBlazor.Data.Entities
@using PrubasBlazor.Services
@attribute [Authorize]
@rendermode InteractiveServer
@inject IUsuariosService UsuarioService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<style>
    .custom-card {
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        border: none;
    }

    .page-title {
        color: #2c3e50;
        font-size: 2rem;
        letter-spacing: 0.5px;
        position: relative;
        margin-bottom: 2rem;
    }

    .page-title:after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 80px;
        height: 3px;
        background: linear-gradient(90deg, #4CAF50, #2E7D32);
        border-radius: 2px;
    }

    .form-control {
        border-radius: 8px;
        padding: 0.8rem;
        border: 1px solid #e0e0e0;
        transition: all 0.3s;
    }

    .form-control:focus {
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
        border-color: #4CAF50;
    }

    .form-label {
        color: #2c3e50;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .btn-save {
        background: linear-gradient(45deg, #4CAF50, #2E7D32);
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        color: white;
        transition: all 0.3s;
        margin-right: 1rem;
    }

    .btn-save:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

    .btn-cancel {
        background: white;
        border: 1px solid #dc3545;
        color: #dc3545;
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        transition: all 0.3s;
        text-decoration: none;
    }

    .btn-cancel:hover {
        background-color: #dc3545;
        color: white;
        transform: translateY(-2px);
    }

    .validation-message {
        font-size: 0.875rem;
        margin-top: 0.25rem;
        color: #dc3545;
    }

    .alert-custom {
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        border: none;
        background-color: #fee2e2;
        color: #dc2626;
    }
</style>

<div class="container-fluid py-5">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-custom">
            <i class="bi bi-exclamation-circle me-2"></i>
            @errorMessage
        </div>
    }

    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            <div class="custom-card card">
                <div class="card-body p-4">
                    <h2 class="page-title text-center">Nuevo Usuario</h2>
                    
                    <EditForm Model="@newCliente" OnValidSubmit="HandleValidSubmit" FormName="AddUsuarioForm">
                        <DataAnnotationsValidator />

                        <div class="mb-4">
                            <label class="form-label" for="Name">Nombre</label>
                            <InputText id="Name" @bind-Value="newCliente.Name" class="form-control" placeholder="Ingrese el nombre" />
                            <ValidationMessage For="() => newCliente.Name" class="validation-message" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label" for="LastName">Apellido</label>
                            <InputText id="LastName" @bind-Value="newCliente.LastName" class="form-control" placeholder="Ingrese el apellido" />
                            <ValidationMessage For="() => newCliente.LastName" class="validation-message" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label" for="Address">Dirección</label>
                            <InputText id="Address" @bind-Value="newCliente.Address" class="form-control" placeholder="Ingrese la dirección" />
                            <ValidationMessage For="() => newCliente.Address" class="validation-message" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label" for="Email">Correo Electrónico</label>
                            <InputText id="Email" @bind-Value="newCliente.Email" class="form-control" placeholder="Ingrese el correo electrónico" />
                            <ValidationMessage For="() => newCliente.Email" class="validation-message" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label" for="Phone">Teléfono</label>
                            <InputText id="Phone" @bind-Value="newCliente.Phone" class="form-control" placeholder="Ingrese el teléfono" />
                            <ValidationMessage For="() => newCliente.Phone" class="validation-message" />
                        </div>

                        <div class="d-flex justify-content-end mt-5">
                            <a href="Usuarios/usuarios" class="btn btn-cancel">
                                <i class="bi bi-x-lg me-2"></i>Cancelar
                            </a>
                            <button type="submit" class="btn btn-save">
                                <i class="bi bi-check-lg me-2"></i>Guardar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel newCliente { get; set; } = new();
    

    private string? fileError;
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Se agregará este usuario");
        if (confirmed)
        {
            try
            {
                Usuario usuario = new Usuario
                    {
                        Name = newCliente.Name,
                        LastName = newCliente.LastName,
                        Address = newCliente.Address,
                        Email = newCliente.Email,
                        Phone = newCliente.Phone,
                       
                    };

                await UsuarioService.AddUsuario(usuario);
                NavigationManager.NavigateTo("/Usuarios/usuarios");
            }
            catch (InvalidOperationException ex)
            {
                errorMessage = ex.Message;
            }

        }

    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El nombre es requerido.")]
        [Display(Name = "Nombre")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "El Apellido es requerido.")]
        [Display(Name = "Apellido")]
        public string LastName { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "El Apellido es requerido.")]
        [Display(Name = "Apellido")]
        public string Address { get; set; } = string.Empty;

        [Required(ErrorMessage = "El Apellido es requerido.")]
        [Display(Name = "Apellido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "El Apellido es requerido.")]
        [Display(Name = "Apellido")]
        public string Phone { get; set; } = string.Empty;

    }
}
